package ServicesProjectMPR;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import MPR.Ksiazka;




public class KsiazkaDBM {
	
	private Connection conn;
	private Statement StworzTabele;
	private PreparedStatement DodajKsiazkeStmt;
	private PreparedStatement PobierzKsiazkiStmt;
	private PreparedStatement ZnajdzKsiazkeByAutorStmt;
	private PreparedStatement UsunKsiazkeStmt;
	private PreparedStatement UsunWszystkieKsiazkiStmt; 

	
	public KsiazkaDBM(){
		
		try {
		conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		StworzTabele = conn.createStatement();
		ResultSet wynik = conn.getMetaData().getTables(null, null, null, null);
		boolean KsiazkaTableExists=false;
		while(wynik.next())
		{
		if("Ksiazki".equalsIgnoreCase(wynik.getString("Table_Name")))
		{
		KsiazkaTableExists=true;
		break;
		}
		}
		if(!KsiazkaTableExists)
		{
		StworzTabele.executeUpdate("" +
		"CREATE TABLE Ksiazki(" +
		"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
		"id_osoba integer," +
		"autor varchar(20)," + " tytul varchar(50)," + "cena varchar(10),"+
		"Constraint osoba_fk foreign key (id_osoba) references osoby(id) on delete cascade" +
		")");
		}
		DodajKsiazkeStmt = conn.prepareStatement("" +"INSERT INTO Ksiazki (Autor, Tytul, Cena, id_osoba) VALUES (?,?,?,?)" +"");
		PobierzKsiazkiStmt = conn.prepareStatement("" +"SELECT * FROM Ksiazki" +"");
		ZnajdzKsiazkeByAutorStmt = conn.prepareStatement("SELECT * FROM Ksiazki WHERE Autor= ?");
		UsunKsiazkeStmt = conn.prepareStatement("DELETE FROM Ksiazki WHERE ID = ?");
		UsunWszystkieKsiazkiStmt = conn.prepareStatement("DELETE FROM Ksiazki");

		} catch (SQLException e) {

		e.printStackTrace();
		}
		}
	public List<Integer> ZnajdzKsiazkeByAutor (String autor) {
		try {
		List<Integer> wyszukane = new ArrayList<Integer>();
		ZnajdzKsiazkeByAutorStmt.setString(1, autor);
		ResultSet wynik = ZnajdzKsiazkeByAutorStmt.executeQuery();
		while (wynik.next())
		wyszukane.add(wynik.getInt("ID"));
		return wyszukane;
		} catch (SQLException e) {
		e.printStackTrace();
		}
		return null;
		}

	public void DodajKsiazke (Ksiazka s, List<Integer> osoba){
		try {
		
		DodajKsiazkeStmt.setString(1, s.getAutor());
		DodajKsiazkeStmt.setString(2, s.getTytul());
		DodajKsiazkeStmt.setString(3, s.getCena());
		for (Integer Id : osoba){
		DodajKsiazkeStmt.setInt(4, Id);
		}
		DodajKsiazkeStmt.executeUpdate();

		} catch (SQLException e) {

		e.printStackTrace();
		}
	}
	public List<Ksiazka> PobierzKsiazki (){
		List<Ksiazka> ksiazki =new ArrayList<Ksiazka>();

		try {
		ResultSet wynik = PobierzKsiazkiStmt.executeQuery();

		while(wynik.next())
		{
		ksiazki.add(new Ksiazka(wynik.getString("Autor"),wynik.getString("Tytul"),wynik.getString("Cena")));
		}

		} catch (SQLException e) {

		e.printStackTrace();
		}

		return ksiazki;
		}

	public void UsunKsiazke(List<Integer> ksiazki) {
		try {
		for (Integer id : ksiazki) {
			
			UsunKsiazkeStmt.setInt(1, id);
			UsunKsiazkeStmt.executeUpdate();
			}
		} 
		catch (SQLException e) {
		e.printStackTrace();
		}
	}
	public void UsunWszystkieKsiazki() {
		try {
			UsunWszystkieKsiazkiStmt.executeUpdate();
		}
		catch (SQLException e)
		{
		e.printStackTrace();
		}
		}

}
